<?php

namespace Drupal\Tests\graphql_core\Kernel;

use Drupal\Core\Plugin\Context\ContextProviderInterface;
use Drupal\graphql\GraphQL\ResolverBuilder;
use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
use Prophecy\Argument;

/**
 * Test subrequest context retrieval.
 *
 * @group graphql
 */
class ContextTest extends GraphQLTestBase {

  public static $modules = [
    'graphql_context_test',
  ];

  protected function setUp() {
    parent::setUp(); // TODO: Change the autogenerated stub

    // Fake the current user context to avoid its dependency on an actual
    // current user.
    $currentUserContext = $this->prophesize(ContextProviderInterface::class);
    $currentUserContext->getRuntimeContexts(Argument::any())->willReturn([]);
    $this->container->set(
      'user.current_user_context',
      $currentUserContext->reveal()
    );
  }


  /**
   * Test if the schema is created properly.
   */
  public function testSimpleContext() {
    $schema = <<<GQL
    schema {
      query: Query
    }

    type Query {
      route(path: String!): Url
    }

    type Url {
      name: String!
    }
GQL;
    $this->setUpSchema($schema, $this->getDefaultSchema());

    $builder = new ResolverBuilder();
    $this->mockField('route', ['parent' => 'Query'], $builder->produce('route_load', ['mapping' => [
      'path' => $builder->fromArgument('path'),
    ]]));

    $this->mockField('name', ['parent' => 'Url'], $builder->produce('context', ['mapping' => [
      'url' => $builder->fromParent(),
      'id' => $builder->fromValue('route_name'),
    ]]));

    $query = <<<GQL
    query {
      a:route(path: "/graphql/test/a") {
        name
      }
      b:route(path: "/graphql/test/b") {
        name
      }
    }
GQL;

    $metadata = $this->defaultCacheMetaData();

    $this->assertResults($query, [], [
      'a' => ['name' => 'graphql_context_test.a'],
      'b' => ['name' => 'graphql_context_test.b'],
    ], $metadata);
  }

}
