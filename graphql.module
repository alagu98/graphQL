<?php

/**
 * @file
 * Primary module hooks for GraphQL module.
 */

use Drupal\file\FileInterface;

/**
 * Implements hook_help().
 */
function graphql_help(string $routeName): ?string {
  if ($routeName !== 'help.page.graphql') {
    return NULL;
  }

  $title = t('About');
  $description = t('
<p>This module generates and exposes a
  <a href="http://graphql.org/" target="_blank">GraphQL</a> schema for
  <a href="https://www.drupal.org/8" target="_blank">Drupal 8</a> entities,
  and allows you to expose your own custom schema in a consistent way and with
  minimal effort.</p>');

  $help = <<<EOT
<h3>$title</h3>
$description
EOT;

  return $help;
}

/**
 * Implements hook_theme().
 */
function graphql_theme(): array {
  return [
    'page__graphql_explorer' => [
      'render element' => 'elements',
      'base hook' => 'block',
    ],
    'page__graphql_voyager' => [
      'render element' => 'elements',
      'base hook' => 'block',
    ],
  ];
}

/**
 * Copy of file_validate_image_resolution() without creating messages.
 *
 * Verifies that image dimensions are within the specified maximum and minimum.
 *
 * Non-image files will be ignored. If an image toolkit is available the image
 * will be scaled to fit within the desired maximum dimensions.
 *
 * @param \Drupal\file\FileInterface $file
 *   A file entity. This function may resize the file affecting its size.
 * @param string|int $maximum_dimensions
 *   (optional) A string in the form WIDTHxHEIGHT; for example, '640x480' or
 *   '85x85'. If an image toolkit is installed, the image will be resized down
 *   to these dimensions. A value of zero (the default) indicates no restriction
 *   on size, so no resizing will be attempted.
 * @param string|int $minimum_dimensions
 *   (optional) A string in the form WIDTHxHEIGHT. This will check that the
 *   image meets a minimum size. A value of zero (the default) indicates that
 *   there is no restriction on size.
 *
 * @return array
 *   An empty array if the file meets the specified dimensions, was resized
 *   successfully to meet those requirements or is not an image. If the image
 *   does not meet the requirements or an attempt to resize it fails, an array
 *   containing the error message will be returned.
 *
 * @see hook_file_validate()
 */
function graphql_file_validate_image_resolution(FileInterface $file, $maximum_dimensions = 0, $minimum_dimensions = 0) {
  $errors = [];

  // Check first that the file is an image.
  $image_factory = \Drupal::service('image.factory');
  $image = $image_factory->get($file->getFileUri());

  if ($image->isValid()) {
    $scaling = FALSE;
    if ($maximum_dimensions) {
      // Check that it is smaller than the given dimensions.
      [$width, $height] = explode('x', $maximum_dimensions);
      if ($image->getWidth() > $width || $image->getHeight() > $height) {
        // Try to resize the image to fit the dimensions.
        if ($image->scale($width, $height)) {
          $scaling = TRUE;
          $image->save();
        }
        else {
          $errors[] = t('The image exceeds the maximum allowed dimensions and an attempt to resize it failed.');
        }
      }
    }

    if ($minimum_dimensions) {
      // Check that it is larger than the given dimensions.
      [$width, $height] = explode('x', $minimum_dimensions);
      if ($image->getWidth() < $width || $image->getHeight() < $height) {
        if ($scaling) {
          $errors[] = t('The resized image is too small. The minimum dimensions are %dimensions pixels and after resizing, the image size will be %widthx%height pixels.',
            [
              '%dimensions' => $minimum_dimensions,
              '%width' => $image->getWidth(),
              '%height' => $image->getHeight(),
            ]);
        }
        else {
          $errors[] = t('The image is too small. The minimum dimensions are %dimensions pixels and the image size is %widthx%height pixels.',
            [
              '%dimensions' => $minimum_dimensions,
              '%width' => $image->getWidth(),
              '%height' => $image->getHeight(),
            ]);
        }
      }
    }
  }

  return $errors;
}
