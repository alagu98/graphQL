<?php

use Drupal\graphql\Utility\UuidHelper;

/**
 * @file
 * The GraphQL module.
 */

use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function graphql_help($route_name) {
  if ($route_name !== 'help.page.graphql') {
    return;
  }

  $title = t('About');
  $description = t('
<p>This module generates and exposes a
  <a href="http://graphql.org/" target="_blank">GraphQL</a> schema for
  <a href="https://www.drupal.org/8" target="_blank">Drupal 8</a> entities,
  and allows you to expose your own custom schema in a consistent way and with
  minimal effort.</p>

<p>It is probably the easiest way to build headless Drupal sites using the popular
  <a href="https://facebook.github.io/react/" target="_blank">React</a> /
  <a href="https://facebook.github.io/relay/" target="_blank">Relay</a> couple
  for the front-end, on top of the traditional fast Drupal site building for 
  content modeling and management.</p>

<p>Its complete redacted documentation (not a generated API) is available on 
  <a href="https://fgm.gitbooks.io/graphql-for-drupal/content">Github</a>, 
  including an introduction, a "Getting started" section, documentation about 
  the concepts, various ways to build a front-end using the module, how to
  extend the module schema to support custom data, how to debug, and how to
  contribute to the module.</p>
');

  $endpointRoute = 'graphql.request';
  $endpointPath = \Drupal::urlGenerator()->generateFromRoute($endpointRoute, [], ['absolute' => TRUE]);
  $endpointUrl = Url::fromRoute($endpointRoute)->toString();

  $explorerRoute = 'graphql.explorer';
  $explorerPath = \Drupal::urlGenerator()->getPathFromRoute($explorerRoute);
  $explorerUrl = Url::fromRoute($explorerRoute)->toString();

  $exploring = t('Exploring / consuming the API');
  $graphiql = t('
<p>The module comes with a bundled version of the standard GraphQL explorer
  graphiql, available at <a href=":explorerUrl">:explorerPath</a></p>
   
<p>The GraphQL endpoint for clients is exposed at <a href=":endpointUrl">:endpointPath</a></p>', [
  ':explorerPath' => $explorerPath,
  ':explorerUrl' => $explorerUrl,
  ':endpointPath' => $endpointPath,
  ':endpointUrl' => $endpointUrl,
]);

  $examples_items = \Drupal::moduleHandler()->invokeAll('graphql_help');
  if (!empty($examples_items)) {
    ksort($examples_items);
    $examples_list = [
      '#theme' => 'item_list',
      '#list_type' => 'ol',
      '#items' => array_values($examples_items),
    ];
    $examples = render($examples_list);
  }
  else {
    $examples = t('The module also include example submodules, but they are not currently enabled.');
  }
  $examples_title = t('Examples for developers');

  $help = <<<EOT
<h3>$title</h3>
$description

<h3>$exploring</h3>
$graphiql

<h3>$examples_title</h3>
$examples
EOT;


  return $help;
}

/**
 * Return a link to the GraphQL help page if needed by an example module.
 *
 * @see graphql_example_query_help()
 *
 * @param string $actual
 *   The name of the route on which hook_help() was called.
 * @param $expected
 *   The name of the example module help route.
 *
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup|null
 *   Help text, possibly null.
 */
function graphql_help_example($actual, $expected) {
  $help = ($actual === $expected)
    ? t('<p>Refer to the <a href=":help">GraphQL help page</a>', [
      ':help' => Url::fromRoute('help.page', [
        'name' => 'graphql',
      ])->toString()])
    : NULL;

  return $help;
}

/**
 * Implements hook_theme().
 */
function graphql_theme() {
  return [
    'page__graphql_explorer' => [
      'render element' => 'elements',
      'base hook' => 'block',
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 */
function graphql_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
  Drupal::database()
    ->insert(UuidHelper::TABLE)
    ->fields([
      'uuid' => $entity->uuid(),
      'type' => $entity->getEntityTypeId(),
      'id' => $entity->id(),
    ])
    ->execute();
}

/**
 * Implements hook_entity_delete().
 */
function graphql_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  Drupal::database()
    ->delete(UuidHelper::TABLE)
    ->condition('uuid', $entity->uuid())
    ->execute();
}
